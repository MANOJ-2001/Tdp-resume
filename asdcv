# Create the graph with all nodes and edges
def create_agent_graph():
    workflow = StateGraph(AgentState)
    
    # Add nodes
    workflow.add_node("nlu_router", nlu_intent_router)
    workflow.add_node("general_agent", general_agent)
    workflow.add_node("utilities_agent", utilities_agent)
    workflow.add_node("tools_agent", tools_agent)
    workflow.add_node("agentic_rag", agentic_rag)
    workflow.add_node("rag_router", rag_router)
    workflow.add_node("chatbot", chatbot)
    
    # Define edges
    # Start with NLU router
    workflow.set_entry_point("nlu_router")
    
    # NLU routes to appropriate agent (mandatory)
    workflow.add_conditional_edges(
        "nlu_router",
        lambda x: x,
        {
            "general_agent": "general_agent",
            "utilities_agent": "utilities_agent",
            "tools_agent": "tools_agent",
        }
    )
    
    # Each agent conditionally uses RAG
    workflow.add_conditional_edges(
        "general_agent",
        should_use_rag,
        {
            "agentic_rag": "agentic_rag",
            "chatbot": "chatbot"
        }
    )
    
    workflow.add_conditional_edges(
        "utilities_agent",
        should_use_rag,
        {
            "agentic_rag": "agentic_rag",
            "chatbot": "chatbot"
        }
    )
    
    workflow.add_conditional_edges(
        "tools_agent",
        should_use_rag,
        {
            "agentic_rag": "agentic_rag",
            "chatbot": "chatbot"
        }
    )
    
    # After RAG, route back to the appropriate agent (mandatory)
    workflow.add_edge("agentic_rag", "rag_router")
    
    workflow.add_conditional_edges(
        "rag_router",
        lambda x: x["current_agent"],
        {
            "general_agent": "general_agent",
            "utilities_agent": "utilities_agent",
            "tools_agent": "tools_agent",
        }
    )
    
    # All agents send to chatbot (mandatory)
    # Note: We've already added edges from agents to chatbot in the conditional RAG logic
    
    # Chatbot sends to end (mandatory)
    workflow.add_edge("chatbot", END)
    
    return workflow.compile()

# Create the agent graph
agent_graph = create_agent_graph()
